// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.20.3
// source: telemetry.proto

package telemetry

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TelemetryData represents a collection of metrics from a GPU node
type TelemetryData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Metadata about the collection
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	NodeId        string                 `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Hostname      string                 `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	SensorVersion string                 `protobuf:"bytes,4,opt,name=sensor_version,json=sensorVersion,proto3" json:"sensor_version,omitempty"`
	// GPU metrics
	GpuMetrics []*GPUMetrics `protobuf:"bytes,5,rep,name=gpu_metrics,json=gpuMetrics,proto3" json:"gpu_metrics,omitempty"`
	// System-level metrics
	SystemMetrics *SystemMetrics `protobuf:"bytes,6,opt,name=system_metrics,json=systemMetrics,proto3" json:"system_metrics,omitempty"`
	// Security-related metrics
	SecurityMetrics *SecurityMetrics `protobuf:"bytes,7,opt,name=security_metrics,json=securityMetrics,proto3" json:"security_metrics,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TelemetryData) Reset() {
	*x = TelemetryData{}
	mi := &file_telemetry_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TelemetryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryData) ProtoMessage() {}

func (x *TelemetryData) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryData.ProtoReflect.Descriptor instead.
func (*TelemetryData) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{0}
}

func (x *TelemetryData) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *TelemetryData) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *TelemetryData) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *TelemetryData) GetSensorVersion() string {
	if x != nil {
		return x.SensorVersion
	}
	return ""
}

func (x *TelemetryData) GetGpuMetrics() []*GPUMetrics {
	if x != nil {
		return x.GpuMetrics
	}
	return nil
}

func (x *TelemetryData) GetSystemMetrics() *SystemMetrics {
	if x != nil {
		return x.SystemMetrics
	}
	return nil
}

func (x *TelemetryData) GetSecurityMetrics() *SecurityMetrics {
	if x != nil {
		return x.SecurityMetrics
	}
	return nil
}

// GPUMetrics contains metrics for a single GPU device
type GPUMetrics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Device identification
	DeviceId   uint32 `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	DeviceName string `protobuf:"bytes,2,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	Uuid       string `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
	PciBusId   string `protobuf:"bytes,4,opt,name=pci_bus_id,json=pciBusId,proto3" json:"pci_bus_id,omitempty"`
	// Memory metrics
	Memory *MemoryMetrics `protobuf:"bytes,5,opt,name=memory,proto3" json:"memory,omitempty"`
	// Utilization metrics
	Utilization *UtilizationMetrics `protobuf:"bytes,6,opt,name=utilization,proto3" json:"utilization,omitempty"`
	// Temperature and power
	Thermal *ThermalMetrics `protobuf:"bytes,7,opt,name=thermal,proto3" json:"thermal,omitempty"`
	Power   *PowerMetrics   `protobuf:"bytes,8,opt,name=power,proto3" json:"power,omitempty"`
	// Process information
	Processes []*ProcessMetrics `protobuf:"bytes,9,rep,name=processes,proto3" json:"processes,omitempty"`
	// Performance metrics
	Performance   *PerformanceMetrics `protobuf:"bytes,10,opt,name=performance,proto3" json:"performance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GPUMetrics) Reset() {
	*x = GPUMetrics{}
	mi := &file_telemetry_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GPUMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUMetrics) ProtoMessage() {}

func (x *GPUMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUMetrics.ProtoReflect.Descriptor instead.
func (*GPUMetrics) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{1}
}

func (x *GPUMetrics) GetDeviceId() uint32 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *GPUMetrics) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *GPUMetrics) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *GPUMetrics) GetPciBusId() string {
	if x != nil {
		return x.PciBusId
	}
	return ""
}

func (x *GPUMetrics) GetMemory() *MemoryMetrics {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *GPUMetrics) GetUtilization() *UtilizationMetrics {
	if x != nil {
		return x.Utilization
	}
	return nil
}

func (x *GPUMetrics) GetThermal() *ThermalMetrics {
	if x != nil {
		return x.Thermal
	}
	return nil
}

func (x *GPUMetrics) GetPower() *PowerMetrics {
	if x != nil {
		return x.Power
	}
	return nil
}

func (x *GPUMetrics) GetProcesses() []*ProcessMetrics {
	if x != nil {
		return x.Processes
	}
	return nil
}

func (x *GPUMetrics) GetPerformance() *PerformanceMetrics {
	if x != nil {
		return x.Performance
	}
	return nil
}

// MemoryMetrics represents GPU memory usage
type MemoryMetrics struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	TotalBytes         uint64                 `protobuf:"varint,1,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	UsedBytes          uint64                 `protobuf:"varint,2,opt,name=used_bytes,json=usedBytes,proto3" json:"used_bytes,omitempty"`
	FreeBytes          uint64                 `protobuf:"varint,3,opt,name=free_bytes,json=freeBytes,proto3" json:"free_bytes,omitempty"`
	UtilizationPercent float64                `protobuf:"fixed64,4,opt,name=utilization_percent,json=utilizationPercent,proto3" json:"utilization_percent,omitempty"`
	// Memory bandwidth
	MemoryClockMhz      uint64 `protobuf:"varint,5,opt,name=memory_clock_mhz,json=memoryClockMhz,proto3" json:"memory_clock_mhz,omitempty"`
	MemoryBandwidthGbps uint64 `protobuf:"varint,6,opt,name=memory_bandwidth_gbps,json=memoryBandwidthGbps,proto3" json:"memory_bandwidth_gbps,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MemoryMetrics) Reset() {
	*x = MemoryMetrics{}
	mi := &file_telemetry_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemoryMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryMetrics) ProtoMessage() {}

func (x *MemoryMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryMetrics.ProtoReflect.Descriptor instead.
func (*MemoryMetrics) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{2}
}

func (x *MemoryMetrics) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *MemoryMetrics) GetUsedBytes() uint64 {
	if x != nil {
		return x.UsedBytes
	}
	return 0
}

func (x *MemoryMetrics) GetFreeBytes() uint64 {
	if x != nil {
		return x.FreeBytes
	}
	return 0
}

func (x *MemoryMetrics) GetUtilizationPercent() float64 {
	if x != nil {
		return x.UtilizationPercent
	}
	return 0
}

func (x *MemoryMetrics) GetMemoryClockMhz() uint64 {
	if x != nil {
		return x.MemoryClockMhz
	}
	return 0
}

func (x *MemoryMetrics) GetMemoryBandwidthGbps() uint64 {
	if x != nil {
		return x.MemoryBandwidthGbps
	}
	return 0
}

// UtilizationMetrics represents GPU compute utilization
type UtilizationMetrics struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	GpuPercent     float64                `protobuf:"fixed64,1,opt,name=gpu_percent,json=gpuPercent,proto3" json:"gpu_percent,omitempty"`
	MemoryPercent  float64                `protobuf:"fixed64,2,opt,name=memory_percent,json=memoryPercent,proto3" json:"memory_percent,omitempty"`
	EncoderPercent float64                `protobuf:"fixed64,3,opt,name=encoder_percent,json=encoderPercent,proto3" json:"encoder_percent,omitempty"`
	DecoderPercent float64                `protobuf:"fixed64,4,opt,name=decoder_percent,json=decoderPercent,proto3" json:"decoder_percent,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UtilizationMetrics) Reset() {
	*x = UtilizationMetrics{}
	mi := &file_telemetry_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UtilizationMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtilizationMetrics) ProtoMessage() {}

func (x *UtilizationMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtilizationMetrics.ProtoReflect.Descriptor instead.
func (*UtilizationMetrics) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{3}
}

func (x *UtilizationMetrics) GetGpuPercent() float64 {
	if x != nil {
		return x.GpuPercent
	}
	return 0
}

func (x *UtilizationMetrics) GetMemoryPercent() float64 {
	if x != nil {
		return x.MemoryPercent
	}
	return 0
}

func (x *UtilizationMetrics) GetEncoderPercent() float64 {
	if x != nil {
		return x.EncoderPercent
	}
	return 0
}

func (x *UtilizationMetrics) GetDecoderPercent() float64 {
	if x != nil {
		return x.DecoderPercent
	}
	return 0
}

// ThermalMetrics represents temperature information
type ThermalMetrics struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	GpuTempCelsius          float64                `protobuf:"fixed64,1,opt,name=gpu_temp_celsius,json=gpuTempCelsius,proto3" json:"gpu_temp_celsius,omitempty"`
	MemoryTempCelsius       float64                `protobuf:"fixed64,2,opt,name=memory_temp_celsius,json=memoryTempCelsius,proto3" json:"memory_temp_celsius,omitempty"`
	MaxOperatingTempCelsius float64                `protobuf:"fixed64,3,opt,name=max_operating_temp_celsius,json=maxOperatingTempCelsius,proto3" json:"max_operating_temp_celsius,omitempty"`
	SlowdownTempCelsius     float64                `protobuf:"fixed64,4,opt,name=slowdown_temp_celsius,json=slowdownTempCelsius,proto3" json:"slowdown_temp_celsius,omitempty"`
	ShutdownTempCelsius     float64                `protobuf:"fixed64,5,opt,name=shutdown_temp_celsius,json=shutdownTempCelsius,proto3" json:"shutdown_temp_celsius,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ThermalMetrics) Reset() {
	*x = ThermalMetrics{}
	mi := &file_telemetry_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThermalMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThermalMetrics) ProtoMessage() {}

func (x *ThermalMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThermalMetrics.ProtoReflect.Descriptor instead.
func (*ThermalMetrics) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{4}
}

func (x *ThermalMetrics) GetGpuTempCelsius() float64 {
	if x != nil {
		return x.GpuTempCelsius
	}
	return 0
}

func (x *ThermalMetrics) GetMemoryTempCelsius() float64 {
	if x != nil {
		return x.MemoryTempCelsius
	}
	return 0
}

func (x *ThermalMetrics) GetMaxOperatingTempCelsius() float64 {
	if x != nil {
		return x.MaxOperatingTempCelsius
	}
	return 0
}

func (x *ThermalMetrics) GetSlowdownTempCelsius() float64 {
	if x != nil {
		return x.SlowdownTempCelsius
	}
	return 0
}

func (x *ThermalMetrics) GetShutdownTempCelsius() float64 {
	if x != nil {
		return x.ShutdownTempCelsius
	}
	return 0
}

// PowerMetrics represents power consumption
type PowerMetrics struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	PowerDrawWatts          float64                `protobuf:"fixed64,1,opt,name=power_draw_watts,json=powerDrawWatts,proto3" json:"power_draw_watts,omitempty"`
	PowerLimitWatts         float64                `protobuf:"fixed64,2,opt,name=power_limit_watts,json=powerLimitWatts,proto3" json:"power_limit_watts,omitempty"`
	DefaultPowerLimitWatts  float64                `protobuf:"fixed64,3,opt,name=default_power_limit_watts,json=defaultPowerLimitWatts,proto3" json:"default_power_limit_watts,omitempty"`
	EnforcedPowerLimitWatts float64                `protobuf:"fixed64,4,opt,name=enforced_power_limit_watts,json=enforcedPowerLimitWatts,proto3" json:"enforced_power_limit_watts,omitempty"`
	MinPowerLimitWatts      float64                `protobuf:"fixed64,5,opt,name=min_power_limit_watts,json=minPowerLimitWatts,proto3" json:"min_power_limit_watts,omitempty"`
	MaxPowerLimitWatts      float64                `protobuf:"fixed64,6,opt,name=max_power_limit_watts,json=maxPowerLimitWatts,proto3" json:"max_power_limit_watts,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *PowerMetrics) Reset() {
	*x = PowerMetrics{}
	mi := &file_telemetry_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PowerMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerMetrics) ProtoMessage() {}

func (x *PowerMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerMetrics.ProtoReflect.Descriptor instead.
func (*PowerMetrics) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{5}
}

func (x *PowerMetrics) GetPowerDrawWatts() float64 {
	if x != nil {
		return x.PowerDrawWatts
	}
	return 0
}

func (x *PowerMetrics) GetPowerLimitWatts() float64 {
	if x != nil {
		return x.PowerLimitWatts
	}
	return 0
}

func (x *PowerMetrics) GetDefaultPowerLimitWatts() float64 {
	if x != nil {
		return x.DefaultPowerLimitWatts
	}
	return 0
}

func (x *PowerMetrics) GetEnforcedPowerLimitWatts() float64 {
	if x != nil {
		return x.EnforcedPowerLimitWatts
	}
	return 0
}

func (x *PowerMetrics) GetMinPowerLimitWatts() float64 {
	if x != nil {
		return x.MinPowerLimitWatts
	}
	return 0
}

func (x *PowerMetrics) GetMaxPowerLimitWatts() float64 {
	if x != nil {
		return x.MaxPowerLimitWatts
	}
	return 0
}

// ProcessMetrics represents information about processes using the GPU
type ProcessMetrics struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	Pid                       uint32                 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Name                      string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MemoryUsedBytes           uint64                 `protobuf:"varint,3,opt,name=memory_used_bytes,json=memoryUsedBytes,proto3" json:"memory_used_bytes,omitempty"`
	Type                      string                 `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"` // "C" for compute, "G" for graphics, "C+G" for both
	SmUtilizationPercent      uint32                 `protobuf:"varint,5,opt,name=sm_utilization_percent,json=smUtilizationPercent,proto3" json:"sm_utilization_percent,omitempty"`
	MemoryUtilizationPercent  uint32                 `protobuf:"varint,6,opt,name=memory_utilization_percent,json=memoryUtilizationPercent,proto3" json:"memory_utilization_percent,omitempty"`
	EncoderUtilizationPercent uint32                 `protobuf:"varint,7,opt,name=encoder_utilization_percent,json=encoderUtilizationPercent,proto3" json:"encoder_utilization_percent,omitempty"`
	DecoderUtilizationPercent uint32                 `protobuf:"varint,8,opt,name=decoder_utilization_percent,json=decoderUtilizationPercent,proto3" json:"decoder_utilization_percent,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *ProcessMetrics) Reset() {
	*x = ProcessMetrics{}
	mi := &file_telemetry_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessMetrics) ProtoMessage() {}

func (x *ProcessMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessMetrics.ProtoReflect.Descriptor instead.
func (*ProcessMetrics) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{6}
}

func (x *ProcessMetrics) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ProcessMetrics) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcessMetrics) GetMemoryUsedBytes() uint64 {
	if x != nil {
		return x.MemoryUsedBytes
	}
	return 0
}

func (x *ProcessMetrics) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProcessMetrics) GetSmUtilizationPercent() uint32 {
	if x != nil {
		return x.SmUtilizationPercent
	}
	return 0
}

func (x *ProcessMetrics) GetMemoryUtilizationPercent() uint32 {
	if x != nil {
		return x.MemoryUtilizationPercent
	}
	return 0
}

func (x *ProcessMetrics) GetEncoderUtilizationPercent() uint32 {
	if x != nil {
		return x.EncoderUtilizationPercent
	}
	return 0
}

func (x *ProcessMetrics) GetDecoderUtilizationPercent() uint32 {
	if x != nil {
		return x.DecoderUtilizationPercent
	}
	return 0
}

// PerformanceMetrics represents GPU performance counters
type PerformanceMetrics struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	GraphicsClockMhz uint32                 `protobuf:"varint,1,opt,name=graphics_clock_mhz,json=graphicsClockMhz,proto3" json:"graphics_clock_mhz,omitempty"`
	SmClockMhz       uint32                 `protobuf:"varint,2,opt,name=sm_clock_mhz,json=smClockMhz,proto3" json:"sm_clock_mhz,omitempty"`
	MemoryClockMhz   uint32                 `protobuf:"varint,3,opt,name=memory_clock_mhz,json=memoryClockMhz,proto3" json:"memory_clock_mhz,omitempty"`
	VideoClockMhz    uint32                 `protobuf:"varint,4,opt,name=video_clock_mhz,json=videoClockMhz,proto3" json:"video_clock_mhz,omitempty"`
	// Performance states
	PerformanceState     uint32 `protobuf:"varint,5,opt,name=performance_state,json=performanceState,proto3" json:"performance_state,omitempty"`               // P-state (0-15)
	ClockThrottleReasons uint32 `protobuf:"varint,6,opt,name=clock_throttle_reasons,json=clockThrottleReasons,proto3" json:"clock_throttle_reasons,omitempty"` // Bitmask of throttle reasons
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *PerformanceMetrics) Reset() {
	*x = PerformanceMetrics{}
	mi := &file_telemetry_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerformanceMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceMetrics) ProtoMessage() {}

func (x *PerformanceMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceMetrics.ProtoReflect.Descriptor instead.
func (*PerformanceMetrics) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{7}
}

func (x *PerformanceMetrics) GetGraphicsClockMhz() uint32 {
	if x != nil {
		return x.GraphicsClockMhz
	}
	return 0
}

func (x *PerformanceMetrics) GetSmClockMhz() uint32 {
	if x != nil {
		return x.SmClockMhz
	}
	return 0
}

func (x *PerformanceMetrics) GetMemoryClockMhz() uint32 {
	if x != nil {
		return x.MemoryClockMhz
	}
	return 0
}

func (x *PerformanceMetrics) GetVideoClockMhz() uint32 {
	if x != nil {
		return x.VideoClockMhz
	}
	return 0
}

func (x *PerformanceMetrics) GetPerformanceState() uint32 {
	if x != nil {
		return x.PerformanceState
	}
	return 0
}

func (x *PerformanceMetrics) GetClockThrottleReasons() uint32 {
	if x != nil {
		return x.ClockThrottleReasons
	}
	return 0
}

// SystemMetrics represents system-level information
type SystemMetrics struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DriverVersion string                 `protobuf:"bytes,1,opt,name=driver_version,json=driverVersion,proto3" json:"driver_version,omitempty"`
	CudaVersion   string                 `protobuf:"bytes,2,opt,name=cuda_version,json=cudaVersion,proto3" json:"cuda_version,omitempty"`
	GpuCount      uint32                 `protobuf:"varint,3,opt,name=gpu_count,json=gpuCount,proto3" json:"gpu_count,omitempty"`
	// System resources
	CpuUtilizationPercent  float64 `protobuf:"fixed64,4,opt,name=cpu_utilization_percent,json=cpuUtilizationPercent,proto3" json:"cpu_utilization_percent,omitempty"`
	SystemMemoryTotalBytes uint64  `protobuf:"varint,5,opt,name=system_memory_total_bytes,json=systemMemoryTotalBytes,proto3" json:"system_memory_total_bytes,omitempty"`
	SystemMemoryUsedBytes  uint64  `protobuf:"varint,6,opt,name=system_memory_used_bytes,json=systemMemoryUsedBytes,proto3" json:"system_memory_used_bytes,omitempty"`
	// Network and storage
	NetworkInterfaces []*NetworkInterface `protobuf:"bytes,7,rep,name=network_interfaces,json=networkInterfaces,proto3" json:"network_interfaces,omitempty"`
	StorageDevices    []*StorageDevice    `protobuf:"bytes,8,rep,name=storage_devices,json=storageDevices,proto3" json:"storage_devices,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SystemMetrics) Reset() {
	*x = SystemMetrics{}
	mi := &file_telemetry_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemMetrics) ProtoMessage() {}

func (x *SystemMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemMetrics.ProtoReflect.Descriptor instead.
func (*SystemMetrics) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{8}
}

func (x *SystemMetrics) GetDriverVersion() string {
	if x != nil {
		return x.DriverVersion
	}
	return ""
}

func (x *SystemMetrics) GetCudaVersion() string {
	if x != nil {
		return x.CudaVersion
	}
	return ""
}

func (x *SystemMetrics) GetGpuCount() uint32 {
	if x != nil {
		return x.GpuCount
	}
	return 0
}

func (x *SystemMetrics) GetCpuUtilizationPercent() float64 {
	if x != nil {
		return x.CpuUtilizationPercent
	}
	return 0
}

func (x *SystemMetrics) GetSystemMemoryTotalBytes() uint64 {
	if x != nil {
		return x.SystemMemoryTotalBytes
	}
	return 0
}

func (x *SystemMetrics) GetSystemMemoryUsedBytes() uint64 {
	if x != nil {
		return x.SystemMemoryUsedBytes
	}
	return 0
}

func (x *SystemMetrics) GetNetworkInterfaces() []*NetworkInterface {
	if x != nil {
		return x.NetworkInterfaces
	}
	return nil
}

func (x *SystemMetrics) GetStorageDevices() []*StorageDevice {
	if x != nil {
		return x.StorageDevices
	}
	return nil
}

// NetworkInterface represents network interface metrics
type NetworkInterface struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BytesSent       uint64                 `protobuf:"varint,2,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`
	BytesReceived   uint64                 `protobuf:"varint,3,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`
	PacketsSent     uint64                 `protobuf:"varint,4,opt,name=packets_sent,json=packetsSent,proto3" json:"packets_sent,omitempty"`
	PacketsReceived uint64                 `protobuf:"varint,5,opt,name=packets_received,json=packetsReceived,proto3" json:"packets_received,omitempty"`
	ErrorsIn        uint64                 `protobuf:"varint,6,opt,name=errors_in,json=errorsIn,proto3" json:"errors_in,omitempty"`
	ErrorsOut       uint64                 `protobuf:"varint,7,opt,name=errors_out,json=errorsOut,proto3" json:"errors_out,omitempty"`
	DropsIn         uint64                 `protobuf:"varint,8,opt,name=drops_in,json=dropsIn,proto3" json:"drops_in,omitempty"`
	DropsOut        uint64                 `protobuf:"varint,9,opt,name=drops_out,json=dropsOut,proto3" json:"drops_out,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkInterface) Reset() {
	*x = NetworkInterface{}
	mi := &file_telemetry_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterface) ProtoMessage() {}

func (x *NetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterface.ProtoReflect.Descriptor instead.
func (*NetworkInterface) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{9}
}

func (x *NetworkInterface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkInterface) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *NetworkInterface) GetBytesReceived() uint64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *NetworkInterface) GetPacketsSent() uint64 {
	if x != nil {
		return x.PacketsSent
	}
	return 0
}

func (x *NetworkInterface) GetPacketsReceived() uint64 {
	if x != nil {
		return x.PacketsReceived
	}
	return 0
}

func (x *NetworkInterface) GetErrorsIn() uint64 {
	if x != nil {
		return x.ErrorsIn
	}
	return 0
}

func (x *NetworkInterface) GetErrorsOut() uint64 {
	if x != nil {
		return x.ErrorsOut
	}
	return 0
}

func (x *NetworkInterface) GetDropsIn() uint64 {
	if x != nil {
		return x.DropsIn
	}
	return 0
}

func (x *NetworkInterface) GetDropsOut() uint64 {
	if x != nil {
		return x.DropsOut
	}
	return 0
}

// StorageDevice represents storage device metrics
type StorageDevice struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Device             string                 `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Mountpoint         string                 `protobuf:"bytes,2,opt,name=mountpoint,proto3" json:"mountpoint,omitempty"`
	TotalBytes         uint64                 `protobuf:"varint,3,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	UsedBytes          uint64                 `protobuf:"varint,4,opt,name=used_bytes,json=usedBytes,proto3" json:"used_bytes,omitempty"`
	FreeBytes          uint64                 `protobuf:"varint,5,opt,name=free_bytes,json=freeBytes,proto3" json:"free_bytes,omitempty"`
	UtilizationPercent float64                `protobuf:"fixed64,6,opt,name=utilization_percent,json=utilizationPercent,proto3" json:"utilization_percent,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *StorageDevice) Reset() {
	*x = StorageDevice{}
	mi := &file_telemetry_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorageDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageDevice) ProtoMessage() {}

func (x *StorageDevice) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageDevice.ProtoReflect.Descriptor instead.
func (*StorageDevice) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{10}
}

func (x *StorageDevice) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *StorageDevice) GetMountpoint() string {
	if x != nil {
		return x.Mountpoint
	}
	return ""
}

func (x *StorageDevice) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *StorageDevice) GetUsedBytes() uint64 {
	if x != nil {
		return x.UsedBytes
	}
	return 0
}

func (x *StorageDevice) GetFreeBytes() uint64 {
	if x != nil {
		return x.FreeBytes
	}
	return 0
}

func (x *StorageDevice) GetUtilizationPercent() float64 {
	if x != nil {
		return x.UtilizationPercent
	}
	return 0
}

// SecurityMetrics represents security-related metrics
type SecurityMetrics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Integrity measurements
	IntegrityMeasurements []*IntegrityMeasurement `protobuf:"bytes,1,rep,name=integrity_measurements,json=integrityMeasurements,proto3" json:"integrity_measurements,omitempty"`
	// Anomaly detection
	AnomalyEvents []*AnomalyEvent `protobuf:"bytes,2,rep,name=anomaly_events,json=anomalyEvents,proto3" json:"anomaly_events,omitempty"`
	// Access control
	AccessEvents  []*AccessEvent `protobuf:"bytes,3,rep,name=access_events,json=accessEvents,proto3" json:"access_events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SecurityMetrics) Reset() {
	*x = SecurityMetrics{}
	mi := &file_telemetry_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecurityMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityMetrics) ProtoMessage() {}

func (x *SecurityMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityMetrics.ProtoReflect.Descriptor instead.
func (*SecurityMetrics) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{11}
}

func (x *SecurityMetrics) GetIntegrityMeasurements() []*IntegrityMeasurement {
	if x != nil {
		return x.IntegrityMeasurements
	}
	return nil
}

func (x *SecurityMetrics) GetAnomalyEvents() []*AnomalyEvent {
	if x != nil {
		return x.AnomalyEvents
	}
	return nil
}

func (x *SecurityMetrics) GetAccessEvents() []*AccessEvent {
	if x != nil {
		return x.AccessEvents
	}
	return nil
}

// IntegrityMeasurement represents a security integrity measurement
type IntegrityMeasurement struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Component     string                 `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`                              // "driver", "firmware", "kernel_module", etc.
	HashAlgorithm string                 `protobuf:"bytes,2,opt,name=hash_algorithm,json=hashAlgorithm,proto3" json:"hash_algorithm,omitempty"` // "sha256", "sha512", etc.
	HashValue     string                 `protobuf:"bytes,3,opt,name=hash_value,json=hashValue,proto3" json:"hash_value,omitempty"`
	MeasuredAt    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=measured_at,json=measuredAt,proto3" json:"measured_at,omitempty"`
	IsTrusted     bool                   `protobuf:"varint,5,opt,name=is_trusted,json=isTrusted,proto3" json:"is_trusted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IntegrityMeasurement) Reset() {
	*x = IntegrityMeasurement{}
	mi := &file_telemetry_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntegrityMeasurement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrityMeasurement) ProtoMessage() {}

func (x *IntegrityMeasurement) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrityMeasurement.ProtoReflect.Descriptor instead.
func (*IntegrityMeasurement) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{12}
}

func (x *IntegrityMeasurement) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *IntegrityMeasurement) GetHashAlgorithm() string {
	if x != nil {
		return x.HashAlgorithm
	}
	return ""
}

func (x *IntegrityMeasurement) GetHashValue() string {
	if x != nil {
		return x.HashValue
	}
	return ""
}

func (x *IntegrityMeasurement) GetMeasuredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.MeasuredAt
	}
	return nil
}

func (x *IntegrityMeasurement) GetIsTrusted() bool {
	if x != nil {
		return x.IsTrusted
	}
	return false
}

// AnomalyEvent represents a detected anomaly
type AnomalyEvent struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	EventType       string                 `protobuf:"bytes,1,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"` // "unusual_memory_pattern", "unexpected_process", etc.
	Description     string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ConfidenceScore float64                `protobuf:"fixed64,3,opt,name=confidence_score,json=confidenceScore,proto3" json:"confidence_score,omitempty"` // 0.0 to 1.0
	DetectedAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=detected_at,json=detectedAt,proto3" json:"detected_at,omitempty"`
	Metadata        map[string]string      `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AnomalyEvent) Reset() {
	*x = AnomalyEvent{}
	mi := &file_telemetry_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnomalyEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnomalyEvent) ProtoMessage() {}

func (x *AnomalyEvent) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnomalyEvent.ProtoReflect.Descriptor instead.
func (*AnomalyEvent) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{13}
}

func (x *AnomalyEvent) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *AnomalyEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AnomalyEvent) GetConfidenceScore() float64 {
	if x != nil {
		return x.ConfidenceScore
	}
	return 0
}

func (x *AnomalyEvent) GetDetectedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DetectedAt
	}
	return nil
}

func (x *AnomalyEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// AccessEvent represents a GPU access event
type AccessEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventType     string                 `protobuf:"bytes,1,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"` // "process_start", "memory_allocation", "kernel_launch", etc.
	Pid           uint32                 `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	ProcessName   string                 `protobuf:"bytes,3,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	User          string                 `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Details       map[string]string      `protobuf:"bytes,6,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessEvent) Reset() {
	*x = AccessEvent{}
	mi := &file_telemetry_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessEvent) ProtoMessage() {}

func (x *AccessEvent) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessEvent.ProtoReflect.Descriptor instead.
func (*AccessEvent) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{14}
}

func (x *AccessEvent) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *AccessEvent) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *AccessEvent) GetProcessName() string {
	if x != nil {
		return x.ProcessName
	}
	return ""
}

func (x *AccessEvent) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *AccessEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *AccessEvent) GetDetails() map[string]string {
	if x != nil {
		return x.Details
	}
	return nil
}

// TelemetryResponse represents a response to telemetry data
type TelemetryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ProcessedAt   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=processed_at,json=processedAt,proto3" json:"processed_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TelemetryResponse) Reset() {
	*x = TelemetryResponse{}
	mi := &file_telemetry_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TelemetryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryResponse) ProtoMessage() {}

func (x *TelemetryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryResponse.ProtoReflect.Descriptor instead.
func (*TelemetryResponse) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{15}
}

func (x *TelemetryResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TelemetryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TelemetryResponse) GetProcessedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ProcessedAt
	}
	return nil
}

// GetNodeMetricsRequest represents a request for current node metrics
type GetNodeMetricsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	MetricTypes   []string               `protobuf:"bytes,2,rep,name=metric_types,json=metricTypes,proto3" json:"metric_types,omitempty"` // Optional filter for specific metric types
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNodeMetricsRequest) Reset() {
	*x = GetNodeMetricsRequest{}
	mi := &file_telemetry_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodeMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeMetricsRequest) ProtoMessage() {}

func (x *GetNodeMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetNodeMetricsRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{16}
}

func (x *GetNodeMetricsRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *GetNodeMetricsRequest) GetMetricTypes() []string {
	if x != nil {
		return x.MetricTypes
	}
	return nil
}

// GetHistoricalMetricsRequest represents a request for historical metrics
type GetHistoricalMetricsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	MetricTypes   []string               `protobuf:"bytes,4,rep,name=metric_types,json=metricTypes,proto3" json:"metric_types,omitempty"` // Optional filter for specific metric types
	Limit         uint32                 `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`                               // Optional limit on number of results
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHistoricalMetricsRequest) Reset() {
	*x = GetHistoricalMetricsRequest{}
	mi := &file_telemetry_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHistoricalMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoricalMetricsRequest) ProtoMessage() {}

func (x *GetHistoricalMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetry_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoricalMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetHistoricalMetricsRequest) Descriptor() ([]byte, []int) {
	return file_telemetry_proto_rawDescGZIP(), []int{17}
}

func (x *GetHistoricalMetricsRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *GetHistoricalMetricsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetHistoricalMetricsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetHistoricalMetricsRequest) GetMetricTypes() []string {
	if x != nil {
		return x.MetricTypes
	}
	return nil
}

func (x *GetHistoricalMetricsRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

var File_telemetry_proto protoreflect.FileDescriptor

const file_telemetry_proto_rawDesc = "" +
	"\n" +
	"\x0ftelemetry.proto\x12\x16gpushield.telemetry.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\x8c\x03\n" +
	"\rTelemetryData\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12\x17\n" +
	"\anode_id\x18\x02 \x01(\tR\x06nodeId\x12\x1a\n" +
	"\bhostname\x18\x03 \x01(\tR\bhostname\x12%\n" +
	"\x0esensor_version\x18\x04 \x01(\tR\rsensorVersion\x12C\n" +
	"\vgpu_metrics\x18\x05 \x03(\v2\".gpushield.telemetry.v1.GPUMetricsR\n" +
	"gpuMetrics\x12L\n" +
	"\x0esystem_metrics\x18\x06 \x01(\v2%.gpushield.telemetry.v1.SystemMetricsR\rsystemMetrics\x12R\n" +
	"\x10security_metrics\x18\a \x01(\v2'.gpushield.telemetry.v1.SecurityMetricsR\x0fsecurityMetrics\"\x9b\x04\n" +
	"\n" +
	"GPUMetrics\x12\x1b\n" +
	"\tdevice_id\x18\x01 \x01(\rR\bdeviceId\x12\x1f\n" +
	"\vdevice_name\x18\x02 \x01(\tR\n" +
	"deviceName\x12\x12\n" +
	"\x04uuid\x18\x03 \x01(\tR\x04uuid\x12\x1c\n" +
	"\n" +
	"pci_bus_id\x18\x04 \x01(\tR\bpciBusId\x12=\n" +
	"\x06memory\x18\x05 \x01(\v2%.gpushield.telemetry.v1.MemoryMetricsR\x06memory\x12L\n" +
	"\vutilization\x18\x06 \x01(\v2*.gpushield.telemetry.v1.UtilizationMetricsR\vutilization\x12@\n" +
	"\athermal\x18\a \x01(\v2&.gpushield.telemetry.v1.ThermalMetricsR\athermal\x12:\n" +
	"\x05power\x18\b \x01(\v2$.gpushield.telemetry.v1.PowerMetricsR\x05power\x12D\n" +
	"\tprocesses\x18\t \x03(\v2&.gpushield.telemetry.v1.ProcessMetricsR\tprocesses\x12L\n" +
	"\vperformance\x18\n" +
	" \x01(\v2*.gpushield.telemetry.v1.PerformanceMetricsR\vperformance\"\xfd\x01\n" +
	"\rMemoryMetrics\x12\x1f\n" +
	"\vtotal_bytes\x18\x01 \x01(\x04R\n" +
	"totalBytes\x12\x1d\n" +
	"\n" +
	"used_bytes\x18\x02 \x01(\x04R\tusedBytes\x12\x1d\n" +
	"\n" +
	"free_bytes\x18\x03 \x01(\x04R\tfreeBytes\x12/\n" +
	"\x13utilization_percent\x18\x04 \x01(\x01R\x12utilizationPercent\x12(\n" +
	"\x10memory_clock_mhz\x18\x05 \x01(\x04R\x0ememoryClockMhz\x122\n" +
	"\x15memory_bandwidth_gbps\x18\x06 \x01(\x04R\x13memoryBandwidthGbps\"\xae\x01\n" +
	"\x12UtilizationMetrics\x12\x1f\n" +
	"\vgpu_percent\x18\x01 \x01(\x01R\n" +
	"gpuPercent\x12%\n" +
	"\x0ememory_percent\x18\x02 \x01(\x01R\rmemoryPercent\x12'\n" +
	"\x0fencoder_percent\x18\x03 \x01(\x01R\x0eencoderPercent\x12'\n" +
	"\x0fdecoder_percent\x18\x04 \x01(\x01R\x0edecoderPercent\"\x8f\x02\n" +
	"\x0eThermalMetrics\x12(\n" +
	"\x10gpu_temp_celsius\x18\x01 \x01(\x01R\x0egpuTempCelsius\x12.\n" +
	"\x13memory_temp_celsius\x18\x02 \x01(\x01R\x11memoryTempCelsius\x12;\n" +
	"\x1amax_operating_temp_celsius\x18\x03 \x01(\x01R\x17maxOperatingTempCelsius\x122\n" +
	"\x15slowdown_temp_celsius\x18\x04 \x01(\x01R\x13slowdownTempCelsius\x122\n" +
	"\x15shutdown_temp_celsius\x18\x05 \x01(\x01R\x13shutdownTempCelsius\"\xc2\x02\n" +
	"\fPowerMetrics\x12(\n" +
	"\x10power_draw_watts\x18\x01 \x01(\x01R\x0epowerDrawWatts\x12*\n" +
	"\x11power_limit_watts\x18\x02 \x01(\x01R\x0fpowerLimitWatts\x129\n" +
	"\x19default_power_limit_watts\x18\x03 \x01(\x01R\x16defaultPowerLimitWatts\x12;\n" +
	"\x1aenforced_power_limit_watts\x18\x04 \x01(\x01R\x17enforcedPowerLimitWatts\x121\n" +
	"\x15min_power_limit_watts\x18\x05 \x01(\x01R\x12minPowerLimitWatts\x121\n" +
	"\x15max_power_limit_watts\x18\x06 \x01(\x01R\x12maxPowerLimitWatts\"\xea\x02\n" +
	"\x0eProcessMetrics\x12\x10\n" +
	"\x03pid\x18\x01 \x01(\rR\x03pid\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12*\n" +
	"\x11memory_used_bytes\x18\x03 \x01(\x04R\x0fmemoryUsedBytes\x12\x12\n" +
	"\x04type\x18\x04 \x01(\tR\x04type\x124\n" +
	"\x16sm_utilization_percent\x18\x05 \x01(\rR\x14smUtilizationPercent\x12<\n" +
	"\x1amemory_utilization_percent\x18\x06 \x01(\rR\x18memoryUtilizationPercent\x12>\n" +
	"\x1bencoder_utilization_percent\x18\a \x01(\rR\x19encoderUtilizationPercent\x12>\n" +
	"\x1bdecoder_utilization_percent\x18\b \x01(\rR\x19decoderUtilizationPercent\"\x99\x02\n" +
	"\x12PerformanceMetrics\x12,\n" +
	"\x12graphics_clock_mhz\x18\x01 \x01(\rR\x10graphicsClockMhz\x12 \n" +
	"\fsm_clock_mhz\x18\x02 \x01(\rR\n" +
	"smClockMhz\x12(\n" +
	"\x10memory_clock_mhz\x18\x03 \x01(\rR\x0ememoryClockMhz\x12&\n" +
	"\x0fvideo_clock_mhz\x18\x04 \x01(\rR\rvideoClockMhz\x12+\n" +
	"\x11performance_state\x18\x05 \x01(\rR\x10performanceState\x124\n" +
	"\x16clock_throttle_reasons\x18\x06 \x01(\rR\x14clockThrottleReasons\"\xcb\x03\n" +
	"\rSystemMetrics\x12%\n" +
	"\x0edriver_version\x18\x01 \x01(\tR\rdriverVersion\x12!\n" +
	"\fcuda_version\x18\x02 \x01(\tR\vcudaVersion\x12\x1b\n" +
	"\tgpu_count\x18\x03 \x01(\rR\bgpuCount\x126\n" +
	"\x17cpu_utilization_percent\x18\x04 \x01(\x01R\x15cpuUtilizationPercent\x129\n" +
	"\x19system_memory_total_bytes\x18\x05 \x01(\x04R\x16systemMemoryTotalBytes\x127\n" +
	"\x18system_memory_used_bytes\x18\x06 \x01(\x04R\x15systemMemoryUsedBytes\x12W\n" +
	"\x12network_interfaces\x18\a \x03(\v2(.gpushield.telemetry.v1.NetworkInterfaceR\x11networkInterfaces\x12N\n" +
	"\x0fstorage_devices\x18\b \x03(\v2%.gpushield.telemetry.v1.StorageDeviceR\x0estorageDevices\"\xae\x02\n" +
	"\x10NetworkInterface\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"bytes_sent\x18\x02 \x01(\x04R\tbytesSent\x12%\n" +
	"\x0ebytes_received\x18\x03 \x01(\x04R\rbytesReceived\x12!\n" +
	"\fpackets_sent\x18\x04 \x01(\x04R\vpacketsSent\x12)\n" +
	"\x10packets_received\x18\x05 \x01(\x04R\x0fpacketsReceived\x12\x1b\n" +
	"\terrors_in\x18\x06 \x01(\x04R\berrorsIn\x12\x1d\n" +
	"\n" +
	"errors_out\x18\a \x01(\x04R\terrorsOut\x12\x19\n" +
	"\bdrops_in\x18\b \x01(\x04R\adropsIn\x12\x1b\n" +
	"\tdrops_out\x18\t \x01(\x04R\bdropsOut\"\xd7\x01\n" +
	"\rStorageDevice\x12\x16\n" +
	"\x06device\x18\x01 \x01(\tR\x06device\x12\x1e\n" +
	"\n" +
	"mountpoint\x18\x02 \x01(\tR\n" +
	"mountpoint\x12\x1f\n" +
	"\vtotal_bytes\x18\x03 \x01(\x04R\n" +
	"totalBytes\x12\x1d\n" +
	"\n" +
	"used_bytes\x18\x04 \x01(\x04R\tusedBytes\x12\x1d\n" +
	"\n" +
	"free_bytes\x18\x05 \x01(\x04R\tfreeBytes\x12/\n" +
	"\x13utilization_percent\x18\x06 \x01(\x01R\x12utilizationPercent\"\x8d\x02\n" +
	"\x0fSecurityMetrics\x12c\n" +
	"\x16integrity_measurements\x18\x01 \x03(\v2,.gpushield.telemetry.v1.IntegrityMeasurementR\x15integrityMeasurements\x12K\n" +
	"\x0eanomaly_events\x18\x02 \x03(\v2$.gpushield.telemetry.v1.AnomalyEventR\ranomalyEvents\x12H\n" +
	"\raccess_events\x18\x03 \x03(\v2#.gpushield.telemetry.v1.AccessEventR\faccessEvents\"\xd6\x01\n" +
	"\x14IntegrityMeasurement\x12\x1c\n" +
	"\tcomponent\x18\x01 \x01(\tR\tcomponent\x12%\n" +
	"\x0ehash_algorithm\x18\x02 \x01(\tR\rhashAlgorithm\x12\x1d\n" +
	"\n" +
	"hash_value\x18\x03 \x01(\tR\thashValue\x12;\n" +
	"\vmeasured_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"measuredAt\x12\x1d\n" +
	"\n" +
	"is_trusted\x18\x05 \x01(\bR\tisTrusted\"\xc4\x02\n" +
	"\fAnomalyEvent\x12\x1d\n" +
	"\n" +
	"event_type\x18\x01 \x01(\tR\teventType\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12)\n" +
	"\x10confidence_score\x18\x03 \x01(\x01R\x0fconfidenceScore\x12;\n" +
	"\vdetected_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"detectedAt\x12N\n" +
	"\bmetadata\x18\x05 \x03(\v22.gpushield.telemetry.v1.AnomalyEvent.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb7\x02\n" +
	"\vAccessEvent\x12\x1d\n" +
	"\n" +
	"event_type\x18\x01 \x01(\tR\teventType\x12\x10\n" +
	"\x03pid\x18\x02 \x01(\rR\x03pid\x12!\n" +
	"\fprocess_name\x18\x03 \x01(\tR\vprocessName\x12\x12\n" +
	"\x04user\x18\x04 \x01(\tR\x04user\x128\n" +
	"\ttimestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12J\n" +
	"\adetails\x18\x06 \x03(\v20.gpushield.telemetry.v1.AccessEvent.DetailsEntryR\adetails\x1a:\n" +
	"\fDetailsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x86\x01\n" +
	"\x11TelemetryResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12=\n" +
	"\fprocessed_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\vprocessedAt\"S\n" +
	"\x15GetNodeMetricsRequest\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12!\n" +
	"\fmetric_types\x18\x02 \x03(\tR\vmetricTypes\"\xe1\x01\n" +
	"\x1bGetHistoricalMetricsRequest\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x129\n" +
	"\n" +
	"start_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12!\n" +
	"\fmetric_types\x18\x04 \x03(\tR\vmetricTypes\x12\x14\n" +
	"\x05limit\x18\x05 \x01(\rR\x05limit2\xd9\x02\n" +
	"\x10TelemetryService\x12g\n" +
	"\x0fStreamTelemetry\x12%.gpushield.telemetry.v1.TelemetryData\x1a).gpushield.telemetry.v1.TelemetryResponse(\x010\x01\x12f\n" +
	"\x0eGetNodeMetrics\x12-.gpushield.telemetry.v1.GetNodeMetricsRequest\x1a%.gpushield.telemetry.v1.TelemetryData\x12t\n" +
	"\x14GetHistoricalMetrics\x123.gpushield.telemetry.v1.GetHistoricalMetricsRequest\x1a%.gpushield.telemetry.v1.TelemetryData0\x01B3Z1github.com/ShipKode/gpushield/api/proto/telemetryb\x06proto3"

var (
	file_telemetry_proto_rawDescOnce sync.Once
	file_telemetry_proto_rawDescData []byte
)

func file_telemetry_proto_rawDescGZIP() []byte {
	file_telemetry_proto_rawDescOnce.Do(func() {
		file_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_telemetry_proto_rawDesc), len(file_telemetry_proto_rawDesc)))
	})
	return file_telemetry_proto_rawDescData
}

var file_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_telemetry_proto_goTypes = []any{
	(*TelemetryData)(nil),               // 0: gpushield.telemetry.v1.TelemetryData
	(*GPUMetrics)(nil),                  // 1: gpushield.telemetry.v1.GPUMetrics
	(*MemoryMetrics)(nil),               // 2: gpushield.telemetry.v1.MemoryMetrics
	(*UtilizationMetrics)(nil),          // 3: gpushield.telemetry.v1.UtilizationMetrics
	(*ThermalMetrics)(nil),              // 4: gpushield.telemetry.v1.ThermalMetrics
	(*PowerMetrics)(nil),                // 5: gpushield.telemetry.v1.PowerMetrics
	(*ProcessMetrics)(nil),              // 6: gpushield.telemetry.v1.ProcessMetrics
	(*PerformanceMetrics)(nil),          // 7: gpushield.telemetry.v1.PerformanceMetrics
	(*SystemMetrics)(nil),               // 8: gpushield.telemetry.v1.SystemMetrics
	(*NetworkInterface)(nil),            // 9: gpushield.telemetry.v1.NetworkInterface
	(*StorageDevice)(nil),               // 10: gpushield.telemetry.v1.StorageDevice
	(*SecurityMetrics)(nil),             // 11: gpushield.telemetry.v1.SecurityMetrics
	(*IntegrityMeasurement)(nil),        // 12: gpushield.telemetry.v1.IntegrityMeasurement
	(*AnomalyEvent)(nil),                // 13: gpushield.telemetry.v1.AnomalyEvent
	(*AccessEvent)(nil),                 // 14: gpushield.telemetry.v1.AccessEvent
	(*TelemetryResponse)(nil),           // 15: gpushield.telemetry.v1.TelemetryResponse
	(*GetNodeMetricsRequest)(nil),       // 16: gpushield.telemetry.v1.GetNodeMetricsRequest
	(*GetHistoricalMetricsRequest)(nil), // 17: gpushield.telemetry.v1.GetHistoricalMetricsRequest
	nil,                                 // 18: gpushield.telemetry.v1.AnomalyEvent.MetadataEntry
	nil,                                 // 19: gpushield.telemetry.v1.AccessEvent.DetailsEntry
	(*timestamppb.Timestamp)(nil),       // 20: google.protobuf.Timestamp
}
var file_telemetry_proto_depIdxs = []int32{
	20, // 0: gpushield.telemetry.v1.TelemetryData.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 1: gpushield.telemetry.v1.TelemetryData.gpu_metrics:type_name -> gpushield.telemetry.v1.GPUMetrics
	8,  // 2: gpushield.telemetry.v1.TelemetryData.system_metrics:type_name -> gpushield.telemetry.v1.SystemMetrics
	11, // 3: gpushield.telemetry.v1.TelemetryData.security_metrics:type_name -> gpushield.telemetry.v1.SecurityMetrics
	2,  // 4: gpushield.telemetry.v1.GPUMetrics.memory:type_name -> gpushield.telemetry.v1.MemoryMetrics
	3,  // 5: gpushield.telemetry.v1.GPUMetrics.utilization:type_name -> gpushield.telemetry.v1.UtilizationMetrics
	4,  // 6: gpushield.telemetry.v1.GPUMetrics.thermal:type_name -> gpushield.telemetry.v1.ThermalMetrics
	5,  // 7: gpushield.telemetry.v1.GPUMetrics.power:type_name -> gpushield.telemetry.v1.PowerMetrics
	6,  // 8: gpushield.telemetry.v1.GPUMetrics.processes:type_name -> gpushield.telemetry.v1.ProcessMetrics
	7,  // 9: gpushield.telemetry.v1.GPUMetrics.performance:type_name -> gpushield.telemetry.v1.PerformanceMetrics
	9,  // 10: gpushield.telemetry.v1.SystemMetrics.network_interfaces:type_name -> gpushield.telemetry.v1.NetworkInterface
	10, // 11: gpushield.telemetry.v1.SystemMetrics.storage_devices:type_name -> gpushield.telemetry.v1.StorageDevice
	12, // 12: gpushield.telemetry.v1.SecurityMetrics.integrity_measurements:type_name -> gpushield.telemetry.v1.IntegrityMeasurement
	13, // 13: gpushield.telemetry.v1.SecurityMetrics.anomaly_events:type_name -> gpushield.telemetry.v1.AnomalyEvent
	14, // 14: gpushield.telemetry.v1.SecurityMetrics.access_events:type_name -> gpushield.telemetry.v1.AccessEvent
	20, // 15: gpushield.telemetry.v1.IntegrityMeasurement.measured_at:type_name -> google.protobuf.Timestamp
	20, // 16: gpushield.telemetry.v1.AnomalyEvent.detected_at:type_name -> google.protobuf.Timestamp
	18, // 17: gpushield.telemetry.v1.AnomalyEvent.metadata:type_name -> gpushield.telemetry.v1.AnomalyEvent.MetadataEntry
	20, // 18: gpushield.telemetry.v1.AccessEvent.timestamp:type_name -> google.protobuf.Timestamp
	19, // 19: gpushield.telemetry.v1.AccessEvent.details:type_name -> gpushield.telemetry.v1.AccessEvent.DetailsEntry
	20, // 20: gpushield.telemetry.v1.TelemetryResponse.processed_at:type_name -> google.protobuf.Timestamp
	20, // 21: gpushield.telemetry.v1.GetHistoricalMetricsRequest.start_time:type_name -> google.protobuf.Timestamp
	20, // 22: gpushield.telemetry.v1.GetHistoricalMetricsRequest.end_time:type_name -> google.protobuf.Timestamp
	0,  // 23: gpushield.telemetry.v1.TelemetryService.StreamTelemetry:input_type -> gpushield.telemetry.v1.TelemetryData
	16, // 24: gpushield.telemetry.v1.TelemetryService.GetNodeMetrics:input_type -> gpushield.telemetry.v1.GetNodeMetricsRequest
	17, // 25: gpushield.telemetry.v1.TelemetryService.GetHistoricalMetrics:input_type -> gpushield.telemetry.v1.GetHistoricalMetricsRequest
	15, // 26: gpushield.telemetry.v1.TelemetryService.StreamTelemetry:output_type -> gpushield.telemetry.v1.TelemetryResponse
	0,  // 27: gpushield.telemetry.v1.TelemetryService.GetNodeMetrics:output_type -> gpushield.telemetry.v1.TelemetryData
	0,  // 28: gpushield.telemetry.v1.TelemetryService.GetHistoricalMetrics:output_type -> gpushield.telemetry.v1.TelemetryData
	26, // [26:29] is the sub-list for method output_type
	23, // [23:26] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_telemetry_proto_init() }
func file_telemetry_proto_init() {
	if File_telemetry_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_telemetry_proto_rawDesc), len(file_telemetry_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_telemetry_proto_goTypes,
		DependencyIndexes: file_telemetry_proto_depIdxs,
		MessageInfos:      file_telemetry_proto_msgTypes,
	}.Build()
	File_telemetry_proto = out.File
	file_telemetry_proto_goTypes = nil
	file_telemetry_proto_depIdxs = nil
}
