// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: telemetry.proto

package telemetry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TelemetryService_StreamTelemetry_FullMethodName      = "/gpushield.telemetry.v1.TelemetryService/StreamTelemetry"
	TelemetryService_GetNodeMetrics_FullMethodName       = "/gpushield.telemetry.v1.TelemetryService/GetNodeMetrics"
	TelemetryService_GetHistoricalMetrics_FullMethodName = "/gpushield.telemetry.v1.TelemetryService/GetHistoricalMetrics"
)

// TelemetryServiceClient is the client API for TelemetryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TelemetryService defines the gRPC service for telemetry data
type TelemetryServiceClient interface {
	// Stream telemetry data from sensors
	StreamTelemetry(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TelemetryData, TelemetryResponse], error)
	// Get current metrics for a specific node
	GetNodeMetrics(ctx context.Context, in *GetNodeMetricsRequest, opts ...grpc.CallOption) (*TelemetryData, error)
	// Get historical metrics
	GetHistoricalMetrics(ctx context.Context, in *GetHistoricalMetricsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TelemetryData], error)
}

type telemetryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemetryServiceClient(cc grpc.ClientConnInterface) TelemetryServiceClient {
	return &telemetryServiceClient{cc}
}

func (c *telemetryServiceClient) StreamTelemetry(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TelemetryData, TelemetryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[0], TelemetryService_StreamTelemetry_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TelemetryData, TelemetryResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_StreamTelemetryClient = grpc.BidiStreamingClient[TelemetryData, TelemetryResponse]

func (c *telemetryServiceClient) GetNodeMetrics(ctx context.Context, in *GetNodeMetricsRequest, opts ...grpc.CallOption) (*TelemetryData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TelemetryData)
	err := c.cc.Invoke(ctx, TelemetryService_GetNodeMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) GetHistoricalMetrics(ctx context.Context, in *GetHistoricalMetricsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TelemetryData], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[1], TelemetryService_GetHistoricalMetrics_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetHistoricalMetricsRequest, TelemetryData]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_GetHistoricalMetricsClient = grpc.ServerStreamingClient[TelemetryData]

// TelemetryServiceServer is the server API for TelemetryService service.
// All implementations must embed UnimplementedTelemetryServiceServer
// for forward compatibility.
//
// TelemetryService defines the gRPC service for telemetry data
type TelemetryServiceServer interface {
	// Stream telemetry data from sensors
	StreamTelemetry(grpc.BidiStreamingServer[TelemetryData, TelemetryResponse]) error
	// Get current metrics for a specific node
	GetNodeMetrics(context.Context, *GetNodeMetricsRequest) (*TelemetryData, error)
	// Get historical metrics
	GetHistoricalMetrics(*GetHistoricalMetricsRequest, grpc.ServerStreamingServer[TelemetryData]) error
	mustEmbedUnimplementedTelemetryServiceServer()
}

// UnimplementedTelemetryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTelemetryServiceServer struct{}

func (UnimplementedTelemetryServiceServer) StreamTelemetry(grpc.BidiStreamingServer[TelemetryData, TelemetryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTelemetry not implemented")
}
func (UnimplementedTelemetryServiceServer) GetNodeMetrics(context.Context, *GetNodeMetricsRequest) (*TelemetryData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeMetrics not implemented")
}
func (UnimplementedTelemetryServiceServer) GetHistoricalMetrics(*GetHistoricalMetricsRequest, grpc.ServerStreamingServer[TelemetryData]) error {
	return status.Errorf(codes.Unimplemented, "method GetHistoricalMetrics not implemented")
}
func (UnimplementedTelemetryServiceServer) mustEmbedUnimplementedTelemetryServiceServer() {}
func (UnimplementedTelemetryServiceServer) testEmbeddedByValue()                          {}

// UnsafeTelemetryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelemetryServiceServer will
// result in compilation errors.
type UnsafeTelemetryServiceServer interface {
	mustEmbedUnimplementedTelemetryServiceServer()
}

func RegisterTelemetryServiceServer(s grpc.ServiceRegistrar, srv TelemetryServiceServer) {
	// If the following call pancis, it indicates UnimplementedTelemetryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TelemetryService_ServiceDesc, srv)
}

func _TelemetryService_StreamTelemetry_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TelemetryServiceServer).StreamTelemetry(&grpc.GenericServerStream[TelemetryData, TelemetryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_StreamTelemetryServer = grpc.BidiStreamingServer[TelemetryData, TelemetryResponse]

func _TelemetryService_GetNodeMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).GetNodeMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_GetNodeMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).GetNodeMetrics(ctx, req.(*GetNodeMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_GetHistoricalMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetHistoricalMetricsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).GetHistoricalMetrics(m, &grpc.GenericServerStream[GetHistoricalMetricsRequest, TelemetryData]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TelemetryService_GetHistoricalMetricsServer = grpc.ServerStreamingServer[TelemetryData]

// TelemetryService_ServiceDesc is the grpc.ServiceDesc for TelemetryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelemetryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gpushield.telemetry.v1.TelemetryService",
	HandlerType: (*TelemetryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodeMetrics",
			Handler:    _TelemetryService_GetNodeMetrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTelemetry",
			Handler:       _TelemetryService_StreamTelemetry_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetHistoricalMetrics",
			Handler:       _TelemetryService_GetHistoricalMetrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "telemetry.proto",
}
