{{- if .Values.sensor.enabled }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "gpu-runtime-security.fullname" . }}-sensor
  labels:
    {{- include "gpu-runtime-security.labels" . | nindent 4 }}
    app.kubernetes.io/component: sensor
spec:
  selector:
    matchLabels:
      {{- include "gpu-runtime-security.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: sensor
  template:
    metadata:
      labels:
        {{- include "gpu-runtime-security.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: sensor
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "gpu-runtime-security.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.sensor.securityContext | nindent 8 }}
      hostNetwork: true
      hostPID: true
      containers:
      - name: sensor
        image: "{{ .Values.global.imageRegistry }}{{ .Values.sensor.image.repository }}:{{ .Values.sensor.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.sensor.image.pullPolicy }}
        command:
        - /usr/local/bin/sensor
        args:
        - --interval={{ .Values.sensor.interval }}s
        - --log-level={{ .Values.sensor.logLevel }}
        - --output={{ .Values.sensor.outputFormat }}
        {{- if .Values.sensor.useDCGM }}
        - --use-dcgm
        {{- end }}
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        {{- with .Values.sensor.env }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        resources:
          {{- toYaml .Values.sensor.resources | nindent 10 }}
        volumeMounts:
        # Mount nvidia-smi binary
        - name: nvidia-smi
          mountPath: /usr/bin/nvidia-smi
          readOnly: true
        # Mount NVIDIA Management Library
        - name: nvidia-ml-lib
          mountPath: /usr/lib/x86_64-linux-gnu/libnvidia-ml.so.1
          readOnly: true
        # Mount NVIDIA driver libraries directory
        - name: nvidia-driver-libs
          mountPath: /usr/lib/x86_64-linux-gnu/nvidia
          readOnly: true
        # Mount /dev for GPU device access
        - name: dev
          mountPath: /dev
          readOnly: true
        # Mount /proc for system information
        - name: proc
          mountPath: /host/proc
          readOnly: true
        # Mount /sys for system information
        - name: sys
          mountPath: /host/sys
          readOnly: true
        # Mount container runtime socket for process information
        - name: containerd-sock
          mountPath: /run/containerd/containerd.sock
          readOnly: true
        # Mount Docker socket if available
        - name: docker-sock
          mountPath: /var/run/docker.sock
          readOnly: true
        {{- with .Values.sensor.extraVolumeMounts }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        securityContext:
          privileged: true
          runAsUser: 0
          capabilities:
            add:
            - SYS_ADMIN
            - SYS_PTRACE
            - DAC_OVERRIDE
      volumes:
      # NVIDIA binaries and libraries
      - name: nvidia-smi
        hostPath:
          path: /usr/bin/nvidia-smi
          type: File
      - name: nvidia-ml-lib
        hostPath:
          path: /usr/lib/x86_64-linux-gnu/libnvidia-ml.so.1
          type: File
      - name: nvidia-driver-libs
        hostPath:
          path: /usr/lib/x86_64-linux-gnu/nvidia
          type: DirectoryOrCreate
      # System directories
      - name: dev
        hostPath:
          path: /dev
          type: Directory
      - name: proc
        hostPath:
          path: /proc
          type: Directory
      - name: sys
        hostPath:
          path: /sys
          type: Directory
      # Container runtime sockets
      - name: containerd-sock
        hostPath:
          path: /run/containerd/containerd.sock
          type: Socket
      - name: docker-sock
        hostPath:
          path: /var/run/docker.sock
          type: Socket
      {{- with .Values.sensor.extraVolumes }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      {{- with .Values.sensor.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.sensor.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
{{- end }} 