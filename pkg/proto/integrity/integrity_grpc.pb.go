// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: integrity.proto

package integrity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IntegrityService_PerformIntegrityCheck_FullMethodName  = "/gpushield.integrity.v1.IntegrityService/PerformIntegrityCheck"
	IntegrityService_StreamIntegrityReports_FullMethodName = "/gpushield.integrity.v1.IntegrityService/StreamIntegrityReports"
	IntegrityService_GetIntegrityStatus_FullMethodName     = "/gpushield.integrity.v1.IntegrityService/GetIntegrityStatus"
	IntegrityService_UpdateTrustedBaseline_FullMethodName  = "/gpushield.integrity.v1.IntegrityService/UpdateTrustedBaseline"
)

// IntegrityServiceClient is the client API for IntegrityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// IntegrityService defines the gRPC service for integrity operations
type IntegrityServiceClient interface {
	// Perform integrity check on a node
	PerformIntegrityCheck(ctx context.Context, in *IntegrityCheckRequest, opts ...grpc.CallOption) (*IntegrityReport, error)
	// Stream integrity reports
	StreamIntegrityReports(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[IntegrityReport, IntegrityResponse], error)
	// Get integrity status for a node
	GetIntegrityStatus(ctx context.Context, in *GetIntegrityStatusRequest, opts ...grpc.CallOption) (*IntegrityStatusResponse, error)
	// Update trusted baselines
	UpdateTrustedBaseline(ctx context.Context, in *UpdateTrustedBaselineRequest, opts ...grpc.CallOption) (*UpdateTrustedBaselineResponse, error)
}

type integrityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegrityServiceClient(cc grpc.ClientConnInterface) IntegrityServiceClient {
	return &integrityServiceClient{cc}
}

func (c *integrityServiceClient) PerformIntegrityCheck(ctx context.Context, in *IntegrityCheckRequest, opts ...grpc.CallOption) (*IntegrityReport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntegrityReport)
	err := c.cc.Invoke(ctx, IntegrityService_PerformIntegrityCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrityServiceClient) StreamIntegrityReports(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[IntegrityReport, IntegrityResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IntegrityService_ServiceDesc.Streams[0], IntegrityService_StreamIntegrityReports_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[IntegrityReport, IntegrityResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IntegrityService_StreamIntegrityReportsClient = grpc.BidiStreamingClient[IntegrityReport, IntegrityResponse]

func (c *integrityServiceClient) GetIntegrityStatus(ctx context.Context, in *GetIntegrityStatusRequest, opts ...grpc.CallOption) (*IntegrityStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntegrityStatusResponse)
	err := c.cc.Invoke(ctx, IntegrityService_GetIntegrityStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrityServiceClient) UpdateTrustedBaseline(ctx context.Context, in *UpdateTrustedBaselineRequest, opts ...grpc.CallOption) (*UpdateTrustedBaselineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTrustedBaselineResponse)
	err := c.cc.Invoke(ctx, IntegrityService_UpdateTrustedBaseline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegrityServiceServer is the server API for IntegrityService service.
// All implementations must embed UnimplementedIntegrityServiceServer
// for forward compatibility.
//
// IntegrityService defines the gRPC service for integrity operations
type IntegrityServiceServer interface {
	// Perform integrity check on a node
	PerformIntegrityCheck(context.Context, *IntegrityCheckRequest) (*IntegrityReport, error)
	// Stream integrity reports
	StreamIntegrityReports(grpc.BidiStreamingServer[IntegrityReport, IntegrityResponse]) error
	// Get integrity status for a node
	GetIntegrityStatus(context.Context, *GetIntegrityStatusRequest) (*IntegrityStatusResponse, error)
	// Update trusted baselines
	UpdateTrustedBaseline(context.Context, *UpdateTrustedBaselineRequest) (*UpdateTrustedBaselineResponse, error)
	mustEmbedUnimplementedIntegrityServiceServer()
}

// UnimplementedIntegrityServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIntegrityServiceServer struct{}

func (UnimplementedIntegrityServiceServer) PerformIntegrityCheck(context.Context, *IntegrityCheckRequest) (*IntegrityReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformIntegrityCheck not implemented")
}
func (UnimplementedIntegrityServiceServer) StreamIntegrityReports(grpc.BidiStreamingServer[IntegrityReport, IntegrityResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamIntegrityReports not implemented")
}
func (UnimplementedIntegrityServiceServer) GetIntegrityStatus(context.Context, *GetIntegrityStatusRequest) (*IntegrityStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrityStatus not implemented")
}
func (UnimplementedIntegrityServiceServer) UpdateTrustedBaseline(context.Context, *UpdateTrustedBaselineRequest) (*UpdateTrustedBaselineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrustedBaseline not implemented")
}
func (UnimplementedIntegrityServiceServer) mustEmbedUnimplementedIntegrityServiceServer() {}
func (UnimplementedIntegrityServiceServer) testEmbeddedByValue()                          {}

// UnsafeIntegrityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntegrityServiceServer will
// result in compilation errors.
type UnsafeIntegrityServiceServer interface {
	mustEmbedUnimplementedIntegrityServiceServer()
}

func RegisterIntegrityServiceServer(s grpc.ServiceRegistrar, srv IntegrityServiceServer) {
	// If the following call pancis, it indicates UnimplementedIntegrityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IntegrityService_ServiceDesc, srv)
}

func _IntegrityService_PerformIntegrityCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegrityCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrityServiceServer).PerformIntegrityCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrityService_PerformIntegrityCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrityServiceServer).PerformIntegrityCheck(ctx, req.(*IntegrityCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrityService_StreamIntegrityReports_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IntegrityServiceServer).StreamIntegrityReports(&grpc.GenericServerStream[IntegrityReport, IntegrityResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IntegrityService_StreamIntegrityReportsServer = grpc.BidiStreamingServer[IntegrityReport, IntegrityResponse]

func _IntegrityService_GetIntegrityStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntegrityStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrityServiceServer).GetIntegrityStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrityService_GetIntegrityStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrityServiceServer).GetIntegrityStatus(ctx, req.(*GetIntegrityStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrityService_UpdateTrustedBaseline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrustedBaselineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrityServiceServer).UpdateTrustedBaseline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntegrityService_UpdateTrustedBaseline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrityServiceServer).UpdateTrustedBaseline(ctx, req.(*UpdateTrustedBaselineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntegrityService_ServiceDesc is the grpc.ServiceDesc for IntegrityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntegrityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gpushield.integrity.v1.IntegrityService",
	HandlerType: (*IntegrityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PerformIntegrityCheck",
			Handler:    _IntegrityService_PerformIntegrityCheck_Handler,
		},
		{
			MethodName: "GetIntegrityStatus",
			Handler:    _IntegrityService_GetIntegrityStatus_Handler,
		},
		{
			MethodName: "UpdateTrustedBaseline",
			Handler:    _IntegrityService_UpdateTrustedBaseline_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamIntegrityReports",
			Handler:       _IntegrityService_StreamIntegrityReports_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "integrity.proto",
}
